#coding:utf-8from PyQt5.Qt import QWidget,QApplication,QFileDialog,QTimefrom PyQt5.QtWidgets import QMessageBoxfrom Project import Ui_formimport pymysqlimport xlrdimport sysclass landingpanel(QWidget,Ui_form):    # 定义变量    tablename = 'tablename'    rdfile = 'rdfile'    conn = ''    def __init__(self):        super().__init__()        self.setupUi(self)        # 绑定函数        self.pushButton_connect.clicked.connect(self.mysqlconnect)        self.pushButton.clicked.connect(self.open)        self.pushButton_2.clicked.connect(self.to_mysql)        self.listWidget.clicked.connect(self.set_tobtn)        self.pushButton_disconnected.clicked.connect(self.mysqldisconnect)        # 按钮初始化        self.pushButton.setEnabled(False)               #打开按钮        self.pushButton_2.setEnabled(False)             #导入按钮        self.pushButton_disconnected.setEnabled(False)  #断开按钮    def mysqlconnect(self):        #   连接数据库        dbhost = self.lineEdit_name.text()        dbport = int(self.lineEdit_port.text())        dbuser = self.lineEdit_username.text()        dbpasswd = self.lineEdit_password.text()        dbname = self.lineEdit_dbname.text()        dbcharset = "utf8"        try:            self.conn = pymysql.connect(host=dbhost,                                        port=dbport,                                        user=dbuser,                                        passwd=dbpasswd,                                        db=dbname,                                        charset=dbcharset)        except  BaseException as e:            print(e)            QMessageBox.about(self, '连接失败', str(e))        else:            self.label.setText("数据库连接成功！")            self.pushButton.setEnabled(True)            self.pushButton_disconnected.setEnabled(True)    def mysqldisconnect(self):        try:            self.conn.close()            self.label.setText("数据库已断开连接！")            self.pushButton.setEnabled(False)            self.pushButton_disconnected.setEnabled(False)        except BaseException as e:            print(str(e))            # if str(e) == "Already closed":            #     QMessageBox.about(self,"提示","数据库早已关闭！请放心退出。")    def open(self):        self.pushButton_2.setEnabled(False)        self.listWidget.clear()        filename, _ = QFileDialog.getOpenFileName(self,                                                  '选中文件',                                                  '',                                                  'Excel files(*.xlsx , *.xls)')        self.lineEdit.setText(filename)        try:            # self.wb = openpyxl.load_workbook(filename,read_only=True)            # self.sheets = self.wb.sheetnames            # self.tablename = self.sheets            # self.listWidget.addItems(self.sheets)            # 只读方式打开文件 使用xlrd            self.rdfile = xlrd.open_workbook(filename)            # 获取所有sheetname            self.tablename = self.rdfile.sheet_names()            self.listWidget.addItems(self.tablename)        except BaseException as e:            print(e)            QMessageBox.about(self,'打开失败','打开文件失败，请检查文件')    def set_tobtn(self):        self.label.setText("")        self.pushButton_2.setEnabled(True)    def to_mysql(self):        start_time = QTime.currentTime()        # 建立数据库游标        cur = self.conn.cursor()        # 打印调试        # print(self.tablename)        print(self.listWidget.currentItem().text())        # 获取选中的sheetname        sheetname = self.rdfile.sheet_by_name(self.listWidget.currentItem().text())        # 获取第一行数据        row1 = sheetname.row_values(0)        # tablename = sheetname        tablename = self.listWidget.currentItem().text()        print('tablename',tablename)        # 整理建表SQL语句，默认varchar(255)        sql_createtable = "CREATE TABLE IF NOT EXISTS `" + tablename + "`("        sql_createtable_word = ""        for n in range(len(row1)-1):            # 处理第一行数据为空的情况            if row1[n] != '':                sql_createtable_word +=  "`" + str(row1[n]) +"`" \                                    +"  varchar(255) ,"            else:                sql_createtable_word += "`" + str(n) + "`" \                                        + "  varchar(255) ,"        # 处理第一行数据为空的情况        if row1[-1] != '':            sql_createtable += sql_createtable_word+"`"+str(row1[-1])+"`"+"  varchar(255) )DEFAULT CHARSET=utf8;"        else:            sql_createtable += sql_createtable_word + "`" + str(                len(row1)-1) + "`" + "  varchar(255) )DEFAULT CHARSET=utf8;"        print(sql_createtable)        #执行SQL语句建表，如果表不存在        try:            cur.execute(sql_createtable)        except BaseException as e:            QMessageBox.about(self,'error',str(e))            print(e)        # 整理插入语句        sql_insertArray = []        sql_insert_table = "INSERT INTO `" + tablename + "`() Values ("        x = 0        while x < sheetname.nrows:            sql_insert_word = ""            for y in range(len(sheetname.row_values(x))-1):                sql_insert_word += "'" + str(sheetname.row_values(x)[y]) + "',"            sql_insert_table1 = ""            sql_insert_table1 = sql_insert_table + sql_insert_word + "'" + str(sheetname.row_values(x)[-1]) + "')"            sql_insertArray.append(sql_insert_table1)            x = x + 1        # 调试打印        # print(sql_insertArray)        # 写入数据库        try:            for n in sql_insertArray:                cur.execute(str(n))        except BaseException as e:            print(e)            QMessageBox.about(self,'error',str(e))        finally:            self.conn.commit()            cur.close()        # 记录结束时间        end_time = QTime.currentTime()        time = QTime.msecsTo(start_time,end_time) / 1000        s = "成功导入：" + str(sheetname.nrows) +"条数据，"+ "用时：" + str(time) + "秒"        self.label.setText(s)        # 导入一次不让导入第二次        self.pushButton_2.setEnabled(False)    def closeEvent(self,QCloseEvent):        res = QMessageBox.question(self,"消息","是否关闭这个窗口？这将断开数据库连接。",                                   QMessageBox.Yes | QMessageBox.No,                                   QMessageBox.Yes)        if res == QMessageBox.Yes:            self.mysqldisconnect()            QCloseEvent.accept()        else:            QCloseEvent.ignore()if __name__ == "__main__":    app = QApplication(sys.argv)    landing_panel = landingpanel()    landing_panel.show()    sys.exit(app.exec_())